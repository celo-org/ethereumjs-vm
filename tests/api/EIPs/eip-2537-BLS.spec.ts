import tape from 'tape'
import { Address, BN, bufferToHex } from 'ethereumjs-util'
import Common, { Chain, Hardfork } from '@ethereumjs/common'
import VM from '../../../src'
import { isRunningInKarma } from '../../util'
import { getPrecompile } from '../../../src/evm/precompiles'

const precompileAddressStart = 0x0a
const precompileAddressEnd = 0x12

const precompiles: string[] = []

for (let address = precompileAddressStart; address <= precompileAddressEnd; address++) {
  precompiles.push(address.toString(16).padStart(40, '0'))
}

tape('EIP-2537 BLS tests', (t) => {
  t.test('BLS precompiles should not be available if EIP not activated', async (st) => {
    if (isRunningInKarma()) {
      st.skip('BLS does not work in karma')
      return st.end()
    }
    const common = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.MuirGlacier })
    const vm = new VM({ common: common })

    for (const address of precompiles) {
      const to = new Address(Buffer.from(address, 'hex'))
      const result = await vm.runCall({
        caller: Address.zero(),
        gasLimit: new BN(0xffffffffff),
        to,
        value: new BN(0),
        data: Buffer.alloc(0),
      })

      if (!result.execResult.gasUsed.eq(new BN(0))) {
        st.fail('BLS precompiles should not use any gas if EIP not activated')
      }

      if (result.execResult.exceptionError) {
        st.fail('BLS precompiles should not throw if EIP not activated')
      }
    }

    st.pass('BLS precompiles unreachable if EIP not activated')
    st.end()
  })

  t.test('BLS precompiles should throw on empty inputs', async (st) => {
    if (isRunningInKarma()) {
      st.skip('BLS does not work in karma')
      return st.end()
    }
    const common = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.Byzantium, eips: [2537] })
    const vm = new VM({ common: common })

    for (const address of precompiles) {
      const to = new Address(Buffer.from(address, 'hex'))
      const result = await vm.runCall({
        caller: Address.zero(),
        gasLimit: new BN(0xffffffffff),
        to,
        value: new BN(0),
        data: Buffer.alloc(0),
      })

      if (!result.execResult.gasUsed.eq(new BN(0xffffffffff))) {
        st.fail('BLS precompiles should use all gas on empty inputs')
      }

      if (!result.execResult.exceptionError) {
        st.fail('BLS precompiles should throw on empty inputs')
      }
    }

    st.pass('BLS precompiles throw correctly on empty inputs')
    st.end()
  })

  /* 
    The following tests validate that the various precompiles associated with EIP2537 produce expected results against test vectors
    pulled from this collection of test data provided by Matter Labs here -
    https://github.com/matter-labs/eip1962/tree/master/src/test/test_vectors/eip2537

    In each test, the precompile should take the testVector and produce the testVectorResult
  */
  t.test('BLS12-G2MultiExp', async (st) => {
    if (isRunningInKarma()) {
      st.skip('BLS does not work in karma')
      return st.end()
    }
    const common = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.Berlin, eips: [2537] })
    const vm = new VM({ common: common })
    const address = new Address(Buffer.from('000000000000000000000000000000000000000f', 'hex'))
    const BLS12G2MultiExp = getPrecompile(address, common)

    const testVector =
      ''
    const testVectorResult =
      '0x00000000000000000000000000000000083ad744b34f6393bc983222b004657494232c5d9fbc978d76e2377a28a34c4528da5d91cbc0977dc953397a6d21eca20000000000000000000000000000000015aec6526e151cf5b8403353517dfb9a162087a698b71f32b266d3c5c936a83975d5567c25b3a5994042ec1379c8e526000000000000000000000000000000000e3647185d1a20efad19f975729908840dc33909a583600f7915025f906aef9c022fd34e618170b11178aaa824ae36b300000000000000000000000000000000159576d1d53f6cd12c39d651697e11798321f17cd287118d7ebeabf68281bc03109ee103ee8ef2ef93c71dd1dcbaf1e0'

    const result = await BLS12G2MultiExp({
      data: Buffer.from(testVector, 'hex'),
      gasLimit: new BN(5000000),
      _common: common,
      _VM: vm,
    })

    st.deepEqual(
      testVectorResult,
      bufferToHex(result.returnValue),
      'return value should match testVectorResult'
    )
    st.end()
  })
})
